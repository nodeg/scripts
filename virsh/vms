#!/bin/bash
# shellcheck disable=SC2068,SC2086,SC2102
# A simple shell script to work with VM snapshots
# Tested with openSUSE Tumbleweed
# Author: Dominik Gedon (dgedon@suse.de), Eric Bischoff (ebischoff@suse.com)
# --------------------------------------------------------------------------

# TODO
# - Add proper return codes

VERSION=0.9
NAME=vms

# Delete all VMs/pools/networks
clean () {
    for vm in $(virsh list --name| grep "^${2}"); do virsh destroy "${vm}"; done
    for vm in $(virsh list --all --name | grep "^${2}"); do virsh undefine --nvram "${vm}"; done
    for pool in $(virsh pool-list | grep "active" | cut -d " " -f2); do for volume in $(virsh vol-list --pool "${pool}" | grep "^${2}" | cut -d " " -f2 ); do virsh vol-delete $volume --pool "${pool}"; done; done
    for net in $(virsh net-list --name| grep "^${2}" ); do virsh net-destroy "${net}"; done
    for net in $(virsh net-list --all --name | grep "^${2}"); do virsh net-undefine "${net}"; done
}

# Create snpashots
create () {
    if [ -z "$3" ]; then
        echo "You have to provide a name for the snapshot. Example: core_passed"
        echo "Example: $NAME create <prefix> <snapshot_name>"
        echo "Example: $NAME create <vm_name> <snapshot_name>"
        echo "Example: $NAME create dge core_passed"
        echo "Example: $NAME create dge-srv core_passed"
        exit 1;
    fi
    echo "$3"
    for vm in $(virsh list --name| grep "^${2}"); do
        virsh snapshot-create-as --domain "${vm}" --name "${3}" --description "${vm}_${3}"
    done
}

# Delete snapshots
delete () {
    if [ -z "$3" ]; then
        echo "You have to provide the name of the snapshot you want to delete."
        echo "To list the current snapshots use: $NAME list"
        echo "Example: $NAME delete <prefix> <snapshot_name>"
        echo "Example: $NAME delete <vm_name> <snapshot_name>"
        echo "Example: $NAME delete dge core_passed"
        echo "Example: $NAME delete dge-srv core_passed"
        exit 1;
    fi
    for vm in $(virsh list --name| grep "^${2}"); do
        virsh snapshot-delete --domain "${vm}" "${3}"
    done
}

# Revert to snapshot
revert () {
    if [ -z "$3" ]; then
        echo "You have to provide the name of the snapshot you want to revert to."
        echo "To list the current snapshots use: $NAME list"
        echo "Example: $NAME revert <prefix> <snapshot_name>"
        echo "Example: $NAME revert <vm_name> <snapshot_name>"
        echo "Example: $NAME revert dge core_passed"
        echo "Example: $NAME revert dge-srv core_passed"
        exit 1;
    fi
    for vm in $(virsh list --name| grep "^${2}"); do
        virsh snapshot-revert --domain "${vm}" --snapshotname "${3}"
    done
}

# Show name and ip addresses
info () {
    command='{"execute":"guest-network-get-interfaces"}'
    if [ -z "$2" ]; then
        for vm in $(virsh list --name); do
            echo "${vm}:"
            virsh qemu-agent-command "$vm" "$command" --pretty \
                | grep '"ip-address"' \
                | sed 's/       "ip-address": "//; s/",$//' \
                | sed 's/   ::1//' \
                | sed 's/   127.0.0.1//' \
                | tr '\n' ' '
            echo ""
        done
    else
        virsh qemu-agent-command "$2" "$command" --pretty \
            | grep '"ip-address"' \
            | sed 's/          "ip-address": "127.0.0.1",//' \
            | sed 's/          "ip-address": "::1",//' \
            | sed 's/       "ip-address": "//; s/",$//' \
            | tr -d '[:blank:]' \
            | sed '/^$/d'
    fi
}

# Start VMs
start () {
    if [ -z "$3" ]; then
        echo "You have to provide a prefix and <all> or <vm_name> to start all or only a specific VM."
        echo "To list the current VMs use: $NAME info"
        echo "Example: $NAME start dge all"
        echo "Example: $NAME start dge cli-sles15"
        exit 1;
    fi
    if [ "$3" == "all" ]; then
        for vm in "${2}"-ctl \
                "${2}"-srv \
                "${2}"-cli-sles15 \
                "${2}"-min-sles15 \
                "${2}"-min-build \
                "${2}"-min-centos7 \
                "${2}"-min-kvm \
                "${2}"-min-pxeboot \
                "${2}"-min-ubuntu2004 \
                "${2}"-min-xen \
                "${2}"-minssh-sles15 \
                "${2}"-pxy; do
            virsh start "${vm}"
        done
    else
        virsh start "${3}"
    fi
}

# Stop VMs
stop () {
    if [ -z "$3" ]; then
        echo "You have to provide a prefix and <all> or <vm_name> to stop all or only a specific VM."
        echo "To list the current VMs use: $NAME info"
        echo "Example: $NAME stop dge all"
        echo "Example: $NAME stop dge cli-sles15"
        exit 1;
    fi
    if [ "$3" == "all" ]; then
        for vm in $(virsh list --name| grep "^${2}"); do
            virsh shutdown "${vm}"
        done
    else
        virsh shutdown "${3}"
    fi
}

# Show VM snapshots
list () {
    if [ -z "$3" ]; then
        echo "You have to provide a prefix and <all> or <vm_name> to show all or only a specific VM snapshot."
        echo "To list the current VMs use: $NAME info"
        echo "Example: $NAME list dge all"
        echo "Example: $NAME list dge cli-sles15"
        exit 1;
    fi
    if [ "$3" == "all" ]; then
        for vm in $(virsh list --name| grep "^${2}"); do
            echo "${vm}:"
            virsh snapshot-list "${vm}"
        done
    else
        virsh snapshot-list "${3}"
    fi
}

# Show the help
help () {
    echo "$NAME $VERSION"
    echo "Usage: $NAME OPTION [PARAMETER]"
    echo "Helper utility for working with VMs."
    echo ""
    echo "  clean  Remove all VMs"
    echo "  create Create a snapshot"
    echo "  delete Delete a snapshot"
    echo "  info   Show the name and the IP addresses of a VM"
    echo "  list   Show the snapshots of a VM"
    echo "  revert Revert to a given snapshot"
    echo "  start  Start VMs"
    echo "  stop   Stop VMs"
    echo "  help   Print this help message"
    echo ""
    echo "Examples working with all VMs:"
    echo ""
    echo "  $NAME create dge core_passed"
    echo "  $NAME revert dge core_passed"
    echo "  $NAME delete dge core_passed"
    echo "  $NAME info"
    echo "  $NAME list dge all"
    echo "  $NAME start dge all"
    echo "  $NAME stop dge all"
    echo ""
    echo "Examples working with only a specific VM:"
    echo ""
    echo "  $NAME create dge-srv core_passed"
    echo "  $NAME revert dge-srv core_passed"
    echo "  $NAME delete dge-srv core_passed"
    echo "  $NAME info dge-srv"
    echo "  $NAME list dge dge-srv"
    echo "  $NAME start dge dge-srv"
    echo "  $NAME stop dge dge-srv"
    echo ""
    exit 1
}

# Check if second parameter is empty
check_par () {
    if [ -z "$2" ]; then
        echo "You have to provide the prefix of the environment or the VM name."
        echo "Example prefix: dge"
        echo "Example VM name: dge-srv"
        exit 1;
    fi
}

# Main rutine
case $1 in
    clean)
        check_par $@
        clean $@
        ;;
    create)
        check_par $@
        create $@
        ;;
    delete)
        check_par $@
        delete $@
        ;;
    info)
        info $@
        ;;
    list)
        check_par $@
        list $@
        ;;
    revert)
        check_par $@
        revert $@
        ;;
    start)
        check_par $@
        start $@
        ;;
    stop)
        check_par $@
        stop $@
        ;;
    help | --help)
        help
        ;;
    *)
        help
        ;;
esac
