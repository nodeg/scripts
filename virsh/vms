#!/bin/bash
# shellcheck disable=SC2068,SC2086,SC2102
# A simple shell script to work with VM snapshots
# Tested with openSUSE Tumbleweed
# Author: Dominik Gedon (dgedon@suse.de), Eric Bischoff (ebischoff@suse.com)
# --------------------------------------------------------------------------

# TODO
# - Add proper return codes
# - Possibility to just work with defined VMs

VERSION=0.4
NAME=vms

# Delete all VMs/pools/networks
clean () {
    for vm in $(virsh list --name| grep "^${2}"); do virsh destroy "${vm}"; done
    for vm in $(virsh list --all --name | grep "^${2}"); do virsh undefine --nvram "${vm}"; done
    for pool in $(virsh pool-list | grep "active" | cut -d " " -f2); do for volume in $(virsh vol-list --pool "${pool}" | grep "^${2}" | cut -d " " -f2 ); do virsh vol-delete $volume --pool "${pool}"; done; done
    for net in $(virsh net-list --name| grep "^${2}" ); do virsh net-destroy "${net}"; done
    for net in $(virsh net-list --all --name | grep "^${2}"); do virsh net-undefine "${net}"; done
}

# Create snpashots
create () {
    if [ -z "$3" ]; then
        echo "You have to provide a name for the snapshot. Example: vm_core_passed"
        exit 1;
    fi
    echo "$3"
    for vm in "${2}"-ctl \
              "${2}"-srv \
              "${2}"-cli-sles15 \
              "${2}"-min-sles15 \
              "${2}"-min-build \
              "${2}"-min-centos7 \
              "${2}"-min-kvm \
              "${2}"-min-pxeboot \
              "${2}"-min-ubuntu2004 \
              "${2}"-min-xen \
              "${2}"-minssh-sles15 \
              "${2}"-pxy; do
        virsh snapshot-create-as --domain "${vm}" --name "${vm}_${3}" --description "${vm}_${vm}"
    done
}

# Delete snapshots
delete () {
    if [ -z "$3" ]; then
        echo "You have to provide the name of the snapshot you want to delete without the prefix."
        echo "To list the current snapshots use: $NAME show"
        echo "Example: $NAME delete <prefix> <snapshot_name>"
        echo "Example: $NAME delete dge vm_core_passed"
        exit 1;
    fi
    for vm in "${2}"-ctl \
              "${2}"-srv \
              "${2}"-cli-sles15 \
              "${2}"-min-sles15 \
              "${2}"-min-build \
              "${2}"-min-centos7 \
              "${2}"-min-kvm \
              "${2}"-min-pxeboot \
              "${2}"-min-ubuntu2004 \
              "${2}"-min-xen \
              "${2}"-minssh-sles15 \
              "${2}"-pxy; do
        virsh snapshot-delete --domain "${vm}" "${vm}_${3}"
    done
}

# Revert to snapshot
revert () {
    if [ -z "$3" ]; then
        echo "You have to provide the name of the snapshot you want to revert to without the prefix."
        echo "To list the current snapshots use: $NAME show"
        echo "Example: $NAME revert <prefix> <snapshot_name>"
        echo "Example: $NAME revert dge vm_core_passed"
        exit 1;
    fi
    for vm in "${2}"-ctl \
              "${2}"-srv \
              "${2}"-cli-sles15 \
              "${2}"-min-sles15 \
              "${2}"-min-build \
              "${2}"-min-centos7 \
              "${2}"-min-kvm \
              "${2}"-min-pxeboot \
              "${2}"-min-ubuntu2004 \
              "${2}"-min-xen \
              "${2}"-minssh-sles15 \
              "${2}"-pxy; do
        virsh snapshot-revert --domain "${vm}" --snapshotname "${vm}_${3}" --running
    done
}

# Show name and ip addresses
info () {
    command='{"execute":"guest-network-get-interfaces"}'

    for vm in $(virsh list --name); do
    echo "${vm}:"
    virsh qemu-agent-command "$vm" "$command" --pretty \
        | grep '"ip-address"' \
        | sed 's/       "ip-address": "//; s/",$//' \
        | tr '\n' ' '
    echo
    done
}

# Start VMs
start () {
    for vm in "${2}"-ctl \
              "${2}"-srv \
              "${2}"-cli-sles15 \
              "${2}"-min-sles15 \
              "${2}"-min-build \
              "${2}"-min-centos7 \
              "${2}"-min-kvm \
              "${2}"-min-pxeboot \
              "${2}"-min-ubuntu2004 \
              "${2}"-min-xen \
              "${2}"-minssh-sles15 \
              "${2}"-pxy; do
        virsh start "${vm}"
    done
}

# Stop VMs
stop () {
    for vm in "${2}"-ctl \
              "${2}"-srv \
              "${2}"-cli-sles15 \
              "${2}"-min-sles15 \
              "${2}"-min-build \
              "${2}"-min-centos7 \
              "${2}"-min-kvm \
              "${2}"-min-pxeboot \
              "${2}"-min-ubuntu2004 \
              "${2}"-min-xen \
              "${2}"-minssh-sles15 \
              "${2}"-pxy; do
        virsh shutdown $vm
    done
}

# Show VM snapshots
show () {
    for vm in "${2}"-ctl \
              "${2}"-srv \
              "${2}"-cli-sles15 \
              "${2}"-min-sles15 \
              "${2}"-min-build \
              "${2}"-min-centos7 \
              "${2}"-min-kvm \
              "${2}"-min-pxeboot \
              "${2}"-min-ubuntu2004 \
              "${2}"-min-xen \
              "${2}"-minssh-sles15 \
              "${2}"-pxy; do
        virsh snapshot-list "${vm}"
    done
}

# Show the help
help () {
    echo "$NAME $VERSION"
    echo "Usage: $NAME OPTION [PARAMETER]"
    echo "Helper utility for working with VMs."
    echo ""
    echo "  clean  Remove all VMs"
    echo "  create Create a snapshot"
    echo "  delete Delete a snapshot"
    echo "  info   Show the name and the IP addresses of all VMs"
    echo "  revert Revert to the snapshot created with 'create'"
    echo "  show   Show the snapshots of all VMs"
    echo "  start  Start VMs"
    echo "  stop   Stop VMs"
    echo "  help   Print this help message"
    echo ""
    echo "Examples:"
    echo ""
    echo "  $NAME create dge vm_core_passed"
    echo "  $NAME delete dge vm_core_passed"
    echo "  $NAME info"
    echo "  $NAME revert dge vm_core_passed"
    exit 1
}

# Check if second parameter is empty
check_par () {
    if [ -z "$2" ]; then
        echo "You have to provide the prefix of the environment as a parameter. Example: dge"
        exit 1;
    fi
}

# Main rutine
case $1 in
    clean)
        check_par $@
        clean $@
        ;;
    create)
        check_par $@
        create $@
        ;;
    delete)
        check_par $@
        delete $@
        ;;
    info)
        info
        ;;
    revert)
        check_par $@
        revert $@
        ;;
    show)
        check_par $@
        show $@
        ;;
    start)
        check_par $@
        start $@
        ;;
    stop)
        check_par $@
        stop $@
        ;;
    help | --help)
        help
        ;;
    *)
        help
        ;;
esac

